#!/usr/bin/env python3

"""–¢–µ—Å—Ç —Ñ—ñ–∫—Å—É –¥–ª—è Linus - —á–∏ —Å–ø—Ä–∞–≤–¥—ñ —î –≥–æ–Ω–∫–∞ –ø–æ—Ç–æ–∫—ñ–≤."""

import asyncio
import logging
import time
from pathlib import Path

from src.infrastructure.dependencies_service import DependencyContainer


async def test_race_condition() -> bool | None:
    """–¢–µ—Å—Ç—É—î–º–æ –≥–æ–Ω–∫—É –ø–æ—Ç–æ–∫—ñ–≤ –≤ save_cache."""
    print("üß™ –¢–µ—Å—Ç –≥–æ–Ω–∫–∏ –ø–æ—Ç–æ–∫—ñ–≤ –≤ cache saving...")

    # –ü—Ä–æ—Å—Ç–∏–π –ª–æ–≥–≥—ñ–Ω–≥
    logging.basicConfig(level=logging.INFO)
    console_logger = logging.getLogger("console")
    error_logger = logging.getLogger("error")
    analytics_logger = logging.getLogger("analytics")
    year_updates_logger = logging.getLogger("year_updates")
    db_verify_logger = logging.getLogger("db_verify")

    try:
        deps = DependencyContainer(
            config_path="my-config.yaml",
            console_logger=console_logger,
            error_logger=error_logger,
            analytics_logger=analytics_logger,
            year_updates_logger=year_updates_logger,
            db_verify_logger=db_verify_logger,
            logging_listener=None,
            dry_run=True,
        )

        await deps.initialize()
        cache_service = deps.cache_service

        # –î–æ–¥–∞—î–º–æ –¥–∞–Ω—ñ –≤ –æ–±–∏–¥–≤–∞ –∫–µ—à—ñ
        await cache_service.set_async("test_key_1", "test_value_1", ttl=3600)
        await cache_service.set_async("test_key_2", "test_value_2", ttl=3600)
        await cache_service.store_album_year_in_cache("Test Artist 1", "Test Album 1", "2023")
        await cache_service.store_album_year_in_cache("Test Artist 2", "Test Album 2", "2024")

        print("‚úÖ –î–æ–¥–∞–Ω–æ –¥–∞–Ω—ñ –≤ –æ–±–∏–¥–≤–∞ –∫–µ—à—ñ")

        # –í–∏–∫–æ–Ω—É—î–º–æ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è –¥–µ–∫—ñ–ª—å–∫–∞ —Ä–∞–∑—ñ–≤ –ø—ñ–¥—Ä—è–¥
        start_time = time.time()
        for i in range(3):
            print(f"üîÑ –ó–±–µ—Ä–µ–∂–µ–Ω–Ω—è #{i + 1}...")
            await cache_service.save_cache()

        end_time = time.time()

        await deps.close()
        deps.shutdown()

        print(f"‚úÖ –í—Å—ñ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è –∑–∞–≤–µ—Ä—à–∏–ª–∏—Å—è –∑–∞ {end_time - start_time:.2f}s")

        # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —Ñ–∞–π–ª–∏
        cache_json = Path("/Users/romanborodavkin/Library/Mobile Documents/com~apple~CloudDocs/4. Dev/MGU logs/cache/cache.json")
        cache_csv = Path("/Users/romanborodavkin/Library/Mobile Documents/com~apple~CloudDocs/4. Dev/MGU logs/csv/cache_albums.csv")

        json_ok = cache_json.exists()
        csv_ok = cache_csv.exists()

        print(f"üìÑ JSON cache: {'‚úÖ' if json_ok else '‚ùå'}")
        print(f"üìÑ CSV cache: {'‚úÖ' if csv_ok else '‚ùå'}")

        if json_ok and csv_ok:
            print("‚úÖ Linus –º–æ–∂–µ –±—É—Ç–∏ –∑–∞–¥–æ–≤–æ–ª–µ–Ω–∏–π - —Ñ–∞–π–ª–∏ —Å—Ç–≤–æ—Ä—é—é—Ç—å—Å—è")
            return True
        print("‚ùå –Ñ –ø—Ä–æ–±–ª–µ–º–∏ –∑ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è–º")
        return False

    except Exception as e:
        print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ —Ç–µ—Å—Ç—É: {e}")
        import traceback

        traceback.print_exc()
        return False


if __name__ == "__main__":
    result = asyncio.run(test_race_condition())
    print(f"\n{'‚úÖ Test passed' if result else '‚ùå Test failed'}")
import pytest

pytestmark = pytest.mark.integration
