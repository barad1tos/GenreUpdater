"""Type definitions for testing."""

from __future__ import annotations

import logging
from typing import Any, Protocol, runtime_checkable


@runtime_checkable
class LoggerLike(Protocol):
    """Protocol for logger-like objects."""

    def info(self, message: str, *args: Any, **kwargs: Any) -> None: ...
    def warning(self, message: str, *args: Any, **kwargs: Any) -> None: ...
    def error(self, message: str, *args: Any, exc_info: Any = None, **kwargs: Any) -> None: ...
    def debug(self, message: str, *args: Any, **kwargs: Any) -> None: ...
    def critical(self, message: str, *args: Any, **kwargs: Any) -> None: ...
    def exception(self, message: str, *args: Any, **kwargs: Any) -> None: ...
    def log(self, level: int, message: str, *args: Any, **kwargs: Any) -> None: ...
    def setLevel(self, level: int) -> None: ...
    def addHandler(self, handler: Any) -> None: ...
    def removeHandler(self, handler: Any) -> None: ...
    def isEnabledFor(self, level: int) -> bool: ...
    def getEffectiveLevel(self) -> int: ...


# Type alias for logger-like objects
TestLogger = LoggerLike | logging.Logger
