[build-system]
requires = ["setuptools>=67", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "music-genre-updater"
version = "2.0.0"
description = "Automated music genre updater for Apple Music"
readme = { file = "README.md", content-type = "text/markdown" }
requires-python = ">=3.13"
license = { text = "MIT" }
authors = [{ name = "Roman Borodavkin" }]
keywords = ["music", "apple-music", "genre", "automation"]
classifiers = [
  "Development Status :: 4 - Beta",
  "Intended Audience :: End Users/Desktop",
  "License :: OSI Approved :: MIT License",
  "Operating System :: macOS",
  "Programming Language :: Python :: 3",
  "Programming Language :: Python :: 3.13",
]
dependencies = [
  "pydantic==2.11.9",              # Core data validation and models
  "python-dotenv>=1.0.0",          # Configuration and environment
  "PyYAML>=6.0.0",                 # YAML configuration parsing
  "aiohttp>=3.12.15",              # HTTP client for API requests
  "certifi>=2024.0.0",             # SSL certificates for secure HTTPS connections
  "cryptography>=45.0.7",          # Cryptography for secure token handling
  "aiofiles>=23.0.0",              # File operations
  "rich>=14.1.0",                  # Console output formatting
  "ruff>=0.13.0",                  # Linting and code quality
  "pytest>=8.4.2",                 # Testing framework
  "pytest-cov>=7.0.0",             # Test coverage
  "mypy==1.18.2",                  # Static type checking
  "pytest-asyncio==1.2.0",         # Async test support
  "vulture>=2.14",                 # Dead code detection
  "types-pyyaml==6.0.12.20250915",
  "coverage==7.10.7",
]

[dependency-groups]
dev = [
  "types-pyyaml>=6.0.12.20250822",
  "types-aiofiles>=24.1.0.20250822",
  "pytest-asyncio>=1.1.0",
  "pytest-cov>=7.0.0",
]

[tool.uv]
# uv configuration 
index-url = "https://pypi.org/simple"

# Development scripts are handled separately - removed invalid config

[tool.ruff]
line-length = 150
indent-width = 4
exclude = [
  ".git",
  ".hg",
  ".mypy_cache",
  ".tox",
  ".venv",
  "_build",
  "buck-out",
  "build",
  "dist",
  "__pycache__",
  "*/__init__.py",
]

# Assume Python 3.13+
target-version = "py313"

[tool.ruff.lint]
# Enable pycodestyle (`E`) and Pyflakes (`F`) codes by default.
select = [
  "E",
  "W",
  "F",
  "N",
  "UP",
  "YTT",
  "ANN",
  "S",
  "BLE",
  "B",
  "A",
  "COM",
  "C4",
  "DTZ",
  "T10",
  "EM",
  "EXE",
  "FA",
  "ISC",
  "ICN",
  "G",
  "INP",
  "PIE",
  "T20",
  "PYI",
  "PT",
  "Q",
  "RSE",
  "RET",
  "SLF",
  "SIM",
  "TID",
  "TCH",
  "INT",
  "ARG",
  "PTH",
  "ERA",
  "PD",
  "PGH",
  "PL",
  "TRY",
  "FLY",
  "NPY",
  "PERF",
  "RUF",
]
ignore = [
  "F841",    # Allow unused variables when they start with an underscore
  "N806",    # Allow non-lowercase variable names (for compatibility with existing code)
  "N803",    # Allow non-snake-case function names (for compatibility with existing code)
  "S101",    # Allow use of assert statements (common in data validation)
  "T201",    # Allow print statements (for CLI output)
  "FIX002",  # Allow TODO comments
  "BLE001",  # Allow broad exception catching in some cases
  "B006",    # Allow mutable default arguments (a common pattern in some cases)
  "C901",    # Ignore complexity warnings for now (refactor later)
  "PLR0912", # Allow too-many-branches (refactor later)
  "PLR0913", # Allow too-many-arguments (refactor later)
  "PLR0915", # Allow too-many-statements (refactor later)
  "ISC001",  # Allow implicit string concatenation (conflicts with formatter)
  "COM812",  # Allow trailing comma conflicts with formatter
  "COM819",  # Allow multiline string in parentheses (conflicts with formatter)
  "PLR2004", # Allow magic values in tests and configs
  "TC006",   # PyCharm compatibility: Allow types without quotes in cast() - PyCharm expects actual types
  "ANN401",  # Allow Any types in existing code (gradual migration)
  "G004",    # Allow f-strings in logging (performance is fine for this use case)
  "PTH110",  # Allow os.path usage alongside pathlib (gradual migration)
  "TRY300",  # Allow TRY patterns for existing error handling
  "TRY301",  # Allow TRY patterns for existing error handling
  "TRY401",  # Allow datetime without timezone for internal timestamps
  "DTZ006",  # Allow datetime without timezone for internal timestamps
  "DTZ007",  # Allow datetime without timezone for internal timestamps
]

# Allow autofix for all enabled rules (when `--fix`) is provided.
fixable = ["ALL"]
unfixable = []

[tool.ruff.format]
quote-style = "double"                 # Like Black, use double quotes for strings.
indent-style = "space"                 # Like Black, indent with spaces, rather than tabs.
skip-magic-trailing-comma = false      # Like Black, respect magic trailing commas.
line-ending = "auto"                   # Like Black, automatically detect the appropriate line ending.
docstring-code-format = true           # Reformat code blocks in docstrings.
docstring-code-line-length = "dynamic" # Like Black, wrap docstring code blocks to the configured line length.

[tool.ruff.lint.per-file-ignores]
"tests/**/*.py" = [
  "PLR2004", # Tests can use magic values
  "S101",    # Tests can use assertions
  "PLR0913", # Tests can have many arguments
]
"src/services/api/orchestrator.py" = [
  "TC006", # PyCharm compatibility: Allow types without quotes in cast() - PyCharm expects actual types
]

[tool.mypy]
python_version = "3.13"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = false
warn_unused_ignores = false
warn_no_return = true
warn_unreachable = true
strict_equality = true
show_error_codes = true

[tool.pyright]
include = ["src", "main.py"]
exclude = ["venv", "**/__pycache__", "**/node_modules"]
venvPath = "."
venv = "venv"
pythonVersion = "3.13"
typeCheckingMode = "basic"
reportMissingImports = true
reportMissingTypeStubs = false
reportUnusedImport = true
reportUnusedClass = "warning"
reportUnusedFunction = "warning"
reportUnusedVariable = "warning"
reportGeneralTypeIssues = true
reportOptionalSubscript = true
reportOptionalMemberAccess = true
reportOptionalCall = true
reportOptionalIterable = true
reportOptionalContextManager = true
reportOptionalOperand = true

# Disable walrus operator suggestions to avoid conflicts
reportUnnecessaryComparison = false
reportUnnecessaryContains = false

# PyCharm compatibility: Allow cast() calls for type clarity even when "unnecessary"
reportUnnecessaryCast = false

# Pydantic v2: Standard type checking
reportDeprecated = true
reportIncompatibleMethodOverride = true

# ─────────────────────────────────────────────────────────────────────────────

[tool.pytest.ini_options]
minversion = "7.0"
testpaths = ["tests/unit"]
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
addopts = [
  "-ra",
  "--strict-markers",
  "--ignore=venv",
  "--ignore=.venv",
  "--ignore=.trunk",
]
asyncio_mode = "auto"
markers = [
  "slow: marks tests as slow (deselect with '-m \"not slow\"')",
  "integration: marks tests as integration tests",
  "unit: marks tests as unit tests",
]
# Black configuration (for compatibility)
# ─────────────────────────────────────────────────────────────────────────────
[tool.black]
line-length = 150
target-version = ['py313']
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | venv
  | _build
  | buck-out
  | build
  | dist
  | _legacy
  | tests
  | .trunk
)/
'''

# ─────────────────────────────────────────────────────────────────────────────
# pydocstyle - google docstyle
# ─────────────────────────────────────────────────────────────────────────────
[tool.pydocstyle]
convention = "google"
add_ignore = [
  "D203",
  "D213",
  "D215",
  "D400",
  "D401",
  "D404",
  "D406",
  "D407",
  "D408",
  "D409",
  "D413",
]

# ─────────────────────────────────────────────────────────────────────────────
# Coverage configuration
# ─────────────────────────────────────────────────────────────────────────────
[tool.coverage.run]
source = ["src"]
omit = [
  "**/tests/*",
  "**/test_*.py",
  "**/__pycache__/*",
  "**/venv/*",
  "**/.venv/*",
  "**/site-packages/*",
]

[tool.coverage.report]
exclude_lines = [
  "pragma: no cover",
  "def __repr__",
  "if self.debug:",
  "if settings.DEBUG",
  "raise AssertionError",
  "raise NotImplementedError",
  "if 0:",
  "if __name__ == .__main__.:",
  "if TYPE_CHECKING:",
]

[tool.sourcery]
# Disable walrus operator rules that conflict with other linters
rules = ["no-use-named-expression-in-if", "merge-else-if-into-elif"]

# Pydantic v2 - enable all modern suggestions
python_version = "3.13"

# ─────────────────────────────────────────────────────────────────────────────
# Vulture configuration - Dead code detection
# ─────────────────────────────────────────────────────────────────────────────
[tool.vulture]
min_confidence = 80
paths = ["src"]
sort_by_size = true
exclude = ["tests/", ".venv/", "venv/", ".trunk/"]
ignore_names = ["_*"]                                              # Ignore names starting with underscore
ignore_decorators = ["@app.route", "@pytest.fixture", "@property"]

# ─────────────────────────────────────────────────────────────────────────────
# Pylint configuration
# ─────────────────────────────────────────────────────────────────────────────
[tool.pylint.format]
max-line-length = 150

[tool.pylint.main]
py-version = "3.13"
init-hook = "import sys; sys.path.append('/Users/romanborodavkin/.pyenv/versions/3.13.5/lib/python3.13/site-packages')"

[tool.pylint."messages control"]
disable = [
  "C0103",   # invalid-name (allow short variable names)
  "R0903",   # too-few-public-methods
  "W0613",   # unused-argument (handled by ruff)
  "C0301",   # line-too-long (handled by format section)
  "R0913",   # too-many-arguments
  "R0917",   # too-many-positional-arguments
  "W0718",   # broad-exception-caught
  "W2301",   # unnecessary-ellipsis (valid in Protocol definitions)
  "E0611",   # no-name-in-module (UTC is available in Python 3.13+ datetime)
  "R0914",   # too-many-locals (complex reporting function)
  "R0801",   # duplicate-code (shared patterns in processing modules)
  "R0401",   # cyclic-import (resolved with exceptions module)
  "PLC0415", # import-outside-toplevel (needed for lazy imports in specific functions)
  "R0902",   # too-many-instance-attributes (orchestrator classes naturally need many components)
  "C0302",   # too-many-lines (complex processing modules)
]

# ─────────────────────────────────────────────────────────────────────────────
# Bandit configuration - Security linting
# ─────────────────────────────────────────────────────────────────────────────
[tool.bandit]
skips = ["B404"]
